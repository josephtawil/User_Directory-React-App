{"version":3,"sources":["utils/UserContext.js","components/Form.js","utils/usersModel.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["UserContext","React","createContext","name","value","onChange","image","email","Form","users","useContext","className","htmlFor","placeholder","useUserModel","useState","nameState","setNameState","error","e","target","List","console","log","map","img","filter","filteredName","includes","index","style","margin","src","height","alt","key","App","userModel","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sNAiBeA,G,KAfKC,IAAMC,cAAc,CACpCC,KAAM,CACFC,MAAO,GACPC,SAAU,cAEdC,MAAO,CACHF,MAAO,GACPC,SAAU,cAEdE,MAAO,CACHH,MAAO,GACPC,SAAU,iBCOHG,EAjBF,WAGT,IAAMC,EAAQC,qBAAWV,GAEzB,OACI,6BACI,0CACA,0BAAMW,UAAU,cACZ,2BAAOC,QAAQ,QAAf,SACA,yCAAQD,UAAU,eAAeR,KAAK,OAAOU,YAAY,uBAA0BJ,EAAMN,U,eCG1FW,EAdM,WAAO,IAAD,EAEWC,mBAAS,IAFpB,mBAEhBC,EAFgB,KAELC,EAFK,KAIvB,MAAO,CACHC,MAAqB,KAAdF,EAAmB,4BAA8B,GAExDb,KAAM,CACFC,MAAOY,EACPX,SAAU,SAACc,GAAD,OAAOF,EAAaE,EAAEC,OAAOhB,WC2BpCiB,EAnCF,WAET,IAAMZ,EAAQC,qBAAWV,GAC7BsB,QAAQC,IAAId,EAAMN,MAEC,CAAC,WAAW,eACRqB,KAAI,SAACC,GACpB,MAAO,aAAeA,KAE1B,OAEQ,yBAAKd,UAAU,aAEb,yBAAKA,UAAU,OATX,CAAC,SAAS,OAAO,OAAO,QAAQ,QAU7Be,QAAO,SAACC,GAAD,OAAiBA,EAAaC,SAASnB,EAAMN,KAAKC,UAAQoB,KAAI,SAACrB,EAAM0B,GAC/E,OACE,yBAAKlB,UAAU,OAAOmB,MAAwB,CAACC,OAAQ,QACvD,yBAAKC,IAAK,sBAAuBF,MAAuB,CAACG,OAAQ,SAAUtB,UAAU,eAAeuB,IAAI,QACxG,yBAAKvB,UAAU,aACb,wBAAImB,MAAO,CAAC,cAAiB,QAASK,IAAKN,GAAQ1B,GACnD,yDACA,kECHPiC,MAdf,WACE,IAAM3B,EAAQ4B,IACd,OACE,yBAAK1B,UAAU,OAEb,kBAAC,EAAY2B,SAAb,CAAsBlC,MAAQK,GAC5B,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFY8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLI,QAAQJ,MAAMA,EAAMsC,c","file":"static/js/main.8705ca45.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst UserContext = React.createContext({\r\n    name: {\r\n        value: \"\",\r\n        onChange: ()=>{},\r\n    },\r\n    image: {\r\n        value: \"\",\r\n        onChange: ()=>{},\r\n    },\r\n    email: {\r\n        value: \"\",\r\n        onChange: ()=>{},\r\n    }\r\n})\r\n\r\nexport default UserContext\r\n","import React,{useContext} from 'react'\r\nimport UserContext from '../utils/UserContext';\r\n\r\nconst Form = () => {\r\n\r\n\r\n    const users = useContext(UserContext);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Enter name</h1>\r\n            <form className=\"form-group\">\r\n                <label htmlFor=\"name\">Name:</label>\r\n                <input  className=\"form-control\" name=\"name\" placeholder=\"Enter employee name\" {...users.name}/> \r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import {useState} from 'react'\r\n\r\nconst useUserModel = () => {\r\n    \r\n    const [nameState, setNameState] = useState(\"\");\r\n\r\n    return {\r\n        error: nameState === \"\" ? \"Please enter a name value\" : \"\",\r\n\r\n        name: {\r\n            value: nameState,\r\n            onChange: (e) => setNameState(e.target.value),\r\n        }\r\n    }\r\n}\r\n\r\nexport default useUserModel;\r\n","import React,{useContext} from 'react'\r\nimport UserContext from '../utils/UserContext';\r\n\r\nconst List = () => {\r\n    \r\n    const users = useContext(UserContext);\r\nconsole.log(users.name)\r\n    const names = [\"Joseph\",\"John\",\"Jack\",\"Jacob\",\"Josh\"];\r\n    const images = [\"man1.jpg\",\"MyImage.png\"];\r\n    const img = images.map((img)=>{\r\n        return(\"../images/\" + img);\r\n   })\r\n    return (\r\n        \r\n            <div className=\"container\">\r\n\r\n              <div className=\"row\">\r\n              {names.filter((filteredName)=> filteredName.includes(users.name.value)).map((name, index) =>{\r\n                  return(\r\n                    <div className=\"card\" style={{width: \"18rem\"},{margin: \"1em\"}}>\r\n                    <img src={\"../images/man1.jpeg\"} style= {{width: \"90%\"},{height: \"550px\"}} className=\"card-img-top\" alt=\"...\"/>\r\n                    <div className=\"card-body\">\r\n                      <h4 style={{'listStyleType': 'none'}} key={index}>{name}</h4>\r\n                      <p>Phone Number: 415-609-6690</p>\r\n                      <p>Email: jtawil2015@gmail.com</p>\r\n\r\n        \r\n                    </div>\r\n                  </div>\r\n                  \r\n                  \r\n              )})}\r\n              </div>\r\n            \r\n            </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React from 'react';\nimport Form from './components/Form';\nimport './App.css';\nimport userModel from './utils/usersModel';\nimport UserContext from './utils/UserContext';\nimport List from './components/List';\n\nfunction App() {\n  const users = userModel();\n  return (\n    <div className=\"App\">\n\n      <UserContext.Provider value ={users}>\n        <Form/>\n        <List/>\n      </UserContext.Provider>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}